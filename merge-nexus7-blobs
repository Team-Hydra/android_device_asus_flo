#!/bin/bash
#
# This script merges non-free binaries from Google's Nexus 7 firmware
# into the Linaro Nexus 7 build.
#
# (C) 2012-2014 Bernhard Rosenkraenzer <Bernhard.Rosenkranzer@linaro.org>
# Released under the Apache Software License 2.0.


SRC=""
if [ -d "$1" ]; then
	if [ -e "$1"/system.img ]; then
		SRC="$1"/
	elif [ -e "$1"/out/target/product/flo/system.img ]; then
		SRC="$1"/out/target/product/flo/
	fi
elif [ -e system.img ]; then
	SRC="`pwd`"/
elif [ -e out/target/product/flo/system.img ]; then
	SRC="`pwd`"/out/target/product/flo/
fi
if [ -z "$SRC" ]; then
	echo "Usage: $0 [/path/to/linaro/images]"
	exit 1
fi
if [ "`id -u`" != 0 ]; then
	SUDO="`which sudo || :`"
	[ -z "$SUDO" ] && SUDO="su -c"
else
	SUDO=""
fi
error() {
	# Clean up...
	$SUDO umount -f "`pwd`"/linaro &>/dev/null
	$SUDO umount -f "`pwd`"/blob &>/dev/null
	# Then let the user know
	echo
	echo "*******************************************************************************"
	echo
	echo "Something went wrong."
	echo "Check the output above for errors to see details."
	echo
	echo "Make sure you have all prerequisites installed and you have a working"
	echo "Internet connection."
	echo
	echo "Prerequisites include:"
	echo "	Git (git)		http://git-scm.org/"
	echo "	GCC			http://gcc.gnu.org/ or http://launchpad.net/gcc-linaro"
	echo "	wget			http://www.gnu.org/software/wget"
	echo "	sudo			http://gratisoft.us/sudo/ (alternatively, run as root)"
	echo "	mount, kernel with ext4 support"
	exit 1
}
trap error ERR
WD="`pwd`"
cd "`dirname $0`"
export PATH="$PATH":"`pwd`"/extras/ext4_utils:"`pwd`"/core/libsparse
CFLAGS="-O2 -march=native -mtune=native -DANDROID -I`pwd`/core/include"
# We don't need to touch YAFFS bits right now
#if ! which unyaffs &>/dev/null; then
#	svn co http://unyaffs.googlecode.com/svn/trunk unyaffs
#	cd unyaffs
#	gcc $CFLAGS -o unyaffs unyaffs.c
#fi
if ! which simg2img &>/dev/null; then
	if [ ! -d extras ]; then
		# http fallback is for people behind restrictive firewalls
		git clone git://android.git.linaro.org/platform/system/extras.git || \
			git clone http://android.git.linaro.org/platform/system/extras.git
		git clone git://android.git.linaro.org/platform/system/core.git || \
			git clone http://android.git.linaro.org/platform/system/core.git
		git clone git://android.git.linaro.org/platform/external/libselinux.git || \
			git clone http://android.git.linaro.org/platform/external/libselinux.git
		git clone git://android.git.linaro.org/platform/external/sepolicy.git default-sepolicy || \
			git clone http://android.git.linaro.org/platform/external/sepolicy.git default-sepolicy
		cd default-sepolicy
		git checkout -b kk android-4.4.2_r1
		cd ..
		cd libselinux/src
		git checkout -b kk android-4.4.2_r1
		for i in *.c; do
			gcc $CFLAGS -DHOST -o ${i/.c/.o} -c $i -I. -I../include -I../../core/include
		done
		ar cru libselinux.a *.o
		ranlib libselinux.a
		cd ../..
		cd core
		git checkout -b kk origin/linaro_android_4.4.2
		cd libsparse
		gcc $CFLAGS -DHOST -Iinclude -o simg2img simg2img.c sparse_crc32.c sparse_read.c sparse.c sparse_err.c backed_block.c output_file.c -lz
		cd ../../extras
		git checkout -b kk android-4.4.2_r1
		cd ext4_utils
		gcc $CFLAGS -DHOST -I../../libselinux/include -I../../core/libsparse/include -o make_ext4fs make_ext4fs_main.c make_ext4fs.c ext4fixup.c ext4_utils.c allocate.c contents.c extent.c indirect.c uuid.c crc16.c sha1.c wipe.c ../../core/libsparse/backed_block.c ../../core/libsparse/output_file.c ../../core/libsparse/sparse_read.c ../../core/libsparse/sparse.c ../../core/libsparse/sparse_err.c ../../core/libsparse/sparse_crc32.c -lz -L../../libselinux/src -Wl,-Bstatic -lselinux -Wl,-Bdynamic
		cd ../..
	fi
fi
[ -e razor-kot49h-factory-ebb4918e.tgz ] || wget https://dl.google.com/dl/android/aosp/razor-kot49h-factory-ebb4918e.tgz
[ -d razor-kot49h ] || tar xf razor-kot49h-factory-ebb4918e.tgz
[ -e recovery-clockwork-touch-6.0.4.3-flo.img ] || wget http://download2.clockworkmod.com/recoveries/recovery-clockwork-touch-6.0.4.3-flo.img
cd razor-kot49h
if [ ! -e system.img ]; then
	unzip image-razor-kot49h.zip
fi
cd ..
simg2img "$SRC"/system.img linaro.ext4
simg2img razor-kot49h/system.img blob.ext4
mkdir -p blob linaro system
$SUDO mount -t ext4 -o loop,ro linaro.ext4 linaro
$SUDO mount -t ext4 -o loop,ro blob.ext4 blob
$SUDO rm -rf target tmp
mkdir target
$SUDO cp -a linaro/* target/

# Grab a list of files that exist in the official firmware image, but not
# in ours -- proprietary-blobs.txt is usually missing some stuff.
cd blob
$SUDO find . >../blob.list
cd ../linaro
$SUDO find . >../linaro.list
cd ..
cat blob.list |sort >blob.list.sorted
cat linaro.list |sort >linaro.list.sorted
diff -u linaro.list.sorted blob.list.sorted |grep ^+ |grep -v ^+++ |sed -e 's,^\+.,/system,' >blobs.txt
cat proprietary-blobs.txt proprietary-blobs.txt blobs.txt |sort |uniq -u >unlisted-blobs.txt
# Remove bits that aren't useful and/or are known to be required by Google Apps only
# We remove:
#	*.odex files -- because they don't match our build
#	*.apk files -- because they contain Google Apps that should be installed
#		through a separate installer, they need some modifications to
#		the core system
#	libearth* -- part of Google Earth, should be installed separately
# TODO - there are likely some other files that are needed only for Google Apps and
# that should be removed here.
cat unlisted-blobs.txt |grep -vE '(\.odex|\.apk)$' |grep -v libearth >unlisted-useful-blobs.txt
cat default-sepolicy/file_contexts sepolicy/file_contexts >secontexts
$SUDO umount linaro

cat proprietary-blobs.txt unlisted-useful-blobs.txt |while read r; do
        echo $r |grep -q '^#' && continue
        echo $r |grep -q '^/system' || continue
        r="`echo $r |sed -e 's,^/system,,g'`"
        echo "Copying blob $r"
        [ -z "$r" ] && continue
        $SUDO mkdir -p `dirname target$r`
        $SUDO cp -a blob$r target$r
done
$SUDO umount blob
mkdir tmp
$SUDO "`which make_ext4fs`" -s -S secontexts -l 740M -a system tmp/system.img target/
cd tmp
cp \
	"$SRC"/boot.img \
	"$SRC"/userdata.img \
	../razor-kot49h/android-info.txt \
	./

# We don't currently have a Linaro recovery system, so let's use the
# most commonly used good one...
cp ../recovery-clockwork-touch-6.0.4.3-flo.img \
	recovery.img
zip ../linaro-razor-kot49h.zip boot.img recovery.img system.img userdata.img android-info.txt
cd ..

FASTBOOT="`which fastboot 2>/dev/null || :`"
if [ -n "$FASTBOOT" ]; then
	FASTBOOT_SIZE="`ls -l /sbin/fastboot |awk '{ print $5; }'`"
	if [ "$FASTBOOT_SIZE" -lt 1024 ]; then
		# This is likely LSB fastboot -- a tool that reboots the
		# machine without shutting down services...
		# Let's not use that!
		FASTBOOT=""
	fi
fi
if [ -z "$FASTBOOT" ]; then
	# Let's look for the Android SDK in various places...
	for i in /opt/android-sdk-linux /usr/local/android-sdk-linux /usr/android-sdk-linux; do
		if [ -e "$i/platform-tools/fastboot" ]; then
			FASTBOOT="$i/platform-tools/fastboot"
			break
		fi
	done
fi

echo
echo "*******************************************************************************"
echo
echo "Merging non-free binaries complete."
echo
if [ -n "$FASTBOOT" ]; then
	echo "Note that flashing a new firmware WILL DESTROY ALL DATA ON YOUR"
	echo "TABLET and VOID YOUR WARRANTY."
	echo
	echo "Flash to tablet (y/n)?"
	read r
	r="`echo $r |cut -b1 |tr A-Z a-z`"
else
	r="n"
fi
if [ "$r" != "y" ]; then
	[ -z "$FASTBOOT" ] && FASTBOOT=fastboot
	echo
	echo "Boot your Nexus 7 into bootloader mode by powering it off,"
	echo "then holding the volume down key at the same"
	echo "time while turning the tablet on."
	echo
	echo "Use"
	echo "	$SUDO $FASTBOOT oem unlock"
	echo "	$SUDO $FASTBOOT -w update linaro-razor-kot49h.zip"
	echo "to flash the image manually. Make sure you have the current"
	echo "boot loader and radio firmware installed first."
	echo
	echo "Note that flashing a new firmware WILL DESTROY ALL DATA ON YOUR"
	echo "PHONE and VOID YOUR WARRANTY."
	echo
	echo "Make sure you use the version of \"fastboot\" that comes with"
	echo "the Android SDK -- LSB \"fastboot\" reboots your machine"
	echo "instead."
	exit 0
fi

echo
echo "Boot your Nexus 7 into bootloader mode by powering it off,"
echo "then holding the volume up and volume down keys at the same"
echo "time while turning the tablet on."
echo
# Expected to fail if the device is already unlocked
$SUDO $FASTBOOT oem unlock || :
$SUDO $FASTBOOT -w update linaro-razor-kot49h.zip
